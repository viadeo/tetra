<p class="h3">Bootnode</p>

<span class="subtitle">Concept</span>

<p class="description">
The bootnode is a simple way to load necessary javascript on the fly. If you have a feature not really used or available across all the site, you may like not to specify associated javascript in the head. So bootnode allows you to define it in the html markup using data attributes.
</p>

<span class="subtitle">Activation</span>
<p class="description">
In the core building using tetra configuration, you have to set the enableBootnode parameter in the conf to true. Il will activate this feature for all applications.
</p>

<div class="code">
<pre>
tetra.extend({conf:{}})
</pre>
</div>

<span class="subtitle">Definition in markup</span>

<p class="description">
Bootnode definition must be set in the container element of the application interface. We need to have 3 parameters
</p>
<p class="description">
<b>class="bootnode"</b> : the bootnode className allows the core to find which element is reactive to bootnode actions.
</p>
<p class="description">
<b>data-view="appName/viewName"</b> : the path to the view object associated to the html markup.
</p>
<p class="description">
<b>data-comp="compName"</b> : replace the data-view attribute if you want to load a packed javascript with a custom name compName.
</p>
<p class="description">
<b>data-event="click"</b> : the event that will be handled to launch js retrieving and action call. This attribute supports click, mouseover and focus event type.
</p>

&#60;div class="bootnode" data-view="likeApp/likeButton" data-event="click"&#62;<br>
...<br>
&#60;/div&#62;
<br>
&#60;div class="bootnode" data-comp="likePackage" data-event="click"&#62;<br>
...<br>
&#60;/div&#62;

<br><br>
<span class="subtitle">Dependency management system</span>

<p class="description">
Controller and model objects will be retrieved according to the use parameter of the view and controllers. The core build a chain of dependencies, download each js file and initialize them in the following order: models then controllers then view. After all these steps are completed, the event action is called.
</p>